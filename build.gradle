buildscript {
    ext {
        springBootVersion = '1.2.5.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'war'

war {
    baseName = 'bubbles'
    version = '0.1.0'
    archiveName = 'bubbles.war'
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
    providedRuntime
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-data-rest")
    compile("org.hibernate:hibernate-ehcache:4.3.10.Final")
    runtime("mysql:mysql-connector-java")
    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("com.jayway.jsonpath:json-path:2.0.0")
}

eclipse {
    classpath {
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.5'
}

// deploy to local tomcat server

// All extra properties must be defined through the "ext" namespace.
ext.tomcatHome = System.getenv()["CATALINA_HOME"]
ext.tomcatBin = tomcatHome + '/bin'
ext.tomcatStart = tomcatBin + '/startup'
ext.tomcatStop = tomcatBin + '/shutdown'
ext.tomcatWebapps = tomcatHome + '/webapps'

ant.condition(property: "os", value: "windows") { os(family: "windows") }
ant.condition(property: "os", value: "unix"   ) { os(family: "unix")    }

task checkTomcat << {
    if (tomcatHome == null)
        throw new RuntimeException("Could not get TOMCAT home, please set CATALINA_HOME env virable first!")
    switch(ant.properties.os){
        case 'windows':
            println 'Running on windows.'
            tomcatStart += '.bat'
            tomcatStop += '.bat'
            break
        case 'unix':
            println 'Running on unix.'
            tomcatStart += '.sh'
            tomcatStop += '.sh'
            break
    }
    println "Using CATALINA_HOME: ${tomcatHome}"
    println "Using Tomcat start cmd: ${tomcatStart}"
    println "Using Tomcat stop cmd: ${tomcatStop}"
}

task deployLocal << {
    println "copy war from ${buildDir}/libs into ${tomcatWebapps}"
    copy{
        from "${buildDir}/libs"
        into "${tomcatWebapps}"
        include '*.war'
    }
    //println "start tomcat !"
    //startTomcat.execute()
}

deployLocal.dependsOn checkTomcat

task startTomcat << {
    exec {
        executable tomcatStart
    }
    println 'Start Tomcat server.'
    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method stopTomcat.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
    println 'Done.'
}

startTomcat.dependsOn checkTomcat

task stopTomcat << {
    exec {
        executable tomcatStop
    }
    println 'Shutting down Tomcat server.'

    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()
    //extension method stopTomcat.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
    println 'Done.'
}

stopTomcat.dependsOn checkTomcat

